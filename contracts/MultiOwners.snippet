
  /**
   * @dev add addresses to the whitelist
   * @param _addrs addresses
   * @return true if at least one address was added to the whitelist,
   * false if all addresses were already in the whitelist
   */
//   function InitAddressesAsMultiOwner(address[] _addrs, bytes[] _sides)
//     onlyOwner
//     public
//   {
//     require(initAdd);
//     require(_addrs.length == _sides.length);

//     for (uint256 i = 0; i < _addrs.length; i = i.add(1)) {
//       require(ownerSidesCount() < ownerSidesLimit);

//       addRole(_addrs[i], ROLE_MULTIOWNER);
//       ownerOfSides[_addrs[i]] = string(_sides[i]);
//       uint j = 0;
//       for (; j < owners.length; j = j.add(1)) {
//         if (owners[j] == _addrs[i]) {
//           break;
//         }
//       }

//       if (i >= owners.length) {
//         owners.push(_addrs[i]);
//       }
    
//       clearAuth(AUTH_ADDOWNER);
//       emit OwnerAdded(_addrs[i], string(_sides[i]));
//     }

//     initAdd = false;
//   }

  /**
   * @dev add addresses to the whitelist
   * @param _addrs addresses
   * @return true if at least one address was added to the whitelist,
   * false if all addresses were already in the whitelist
   */
//   function AddAddressesAsMultiOwner(address[] _addrs, bytes[] _sides)
//     onlyMultiOwners
//     public
//   {
//     require(hasAuth(AUTH_ADDOWNER));
//     require(_addrs.length == _sides.length);

//     for (uint256 i = 0; i < _addrs.length; i = i.add(1)) {
//       require(ownerSidesCount() < ownerSidesLimit);

//       addRole(_addrs[i], ROLE_MULTIOWNER);
//       ownerOfSides[_addrs[i]] = string(_sides[i]);
//       uint j = 0;
//       for (; j < owners.length; j = j.add(1)) {
//         if (owners[j] == _addrs[i]) {
//           break;
//         }
//       }

//       if (j >= owners.length) {
//         owners.push(_addrs[i]);
//       }

//       emit OwnerAdded(_addrs[i], string(_sides[i]));
//     }

//     clearAuth(AUTH_ADDOWNER);
//   }

  /**
   * @dev remove addresses from the whitelist
   * @param _addrs addresses
   * @return true if at least one address was removed from the whitelist,
   * false if all addresses weren't in the whitelist in the first place
   */
//   function removeAddressesFromOwners(address[] _addrs)
//     onlyMultiOwners
//     public
//   {
//     require(hasAuth(AUTH_REMOVEOWNER));
//     for (uint i = 0; i < _addrs.length; i = i.add(1)) {
//       removeRole(_addrs[i], ROLE_MULTIOWNER);
//       ownerOfSides[_addrs[i]] = "";
//       uint j = 0;
//       for (; j < owners.length; j = j.add(1)) {
//         if (owners[j] == _addrs[i]) {
//           delete owners[j];
//         }
//       }

//       emit OwnerRemoved(_addrs[i]);
//     }

//     clearAuth(AUTH_REMOVEOWNER);
//   }

//   function ownerSidesCount() internal returns (uint256) {
//     uint256 multiOwnerSides = 0;
//     for (uint i = 0; i < owners.length; i = i.add(1)) {
//       string storage side = ownerOfSides[owners[i]];
//       if (!sideExist[side]) {
//         sideExist[side] = true;
//         multiOwnerSides = multiOwnerSides.add(1);
//       }
//     }

//     return multiOwnerSides;
//   }

//   function setAuthRate(uint256 _value) onlyMultiOwners public {
//     require(hasAuth(AUTH_SETAUTHRATE));
//     require(_value > 0);

//     authRate = _value;
//     clearAuth(AUTH_SETAUTHRATE);
//   }